name: "CodeQL CLI reusable workflow"

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository to run CodeQL on. Format: owner/repo.'
        required: true
        type: string
      ref:
        description: 'The branch, tag or SHA to checkout. Default: default branch.'
        required: false
        type: string
      build_script:
        description: >
          Build script (relative path from .github/build-scripts/).
          Default: Autobuild.
        required: false
        type: string
      install_arm_cross_compiler:
        description: 'Install Arm GNU Toolchain (arm-none-eabi-gcc)'
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      repository:
        description: 'Repository to run CodeQL on. Format: owner/repo.'
        required: true
        type: string
      ref:
        description: 'The branch, tag or SHA to checkout. Default: default branch.'
        required: false
        type: string
      build_script:
        description: >
          Build script (relative path from the root of scanner repo).
          Default: Autobuild.
        required: false
        type: string
      install_arm_cross_compiler:
        description: 'Install Arm GNU Toolchain (arm-none-eabi-gcc)'
        required: false
        type: boolean
        default: false


jobs:
  analyze:
    name: Analyze
    runs-on: self-hosted
    #permissions:
    #  actions: read
    #  contents: read
    #  security-events: write

    strategy:
      fail-fast: false
      #matrix:
      #  language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Set environment variables
      run: |
        echo "CODEQL_DATABASE_PATH=$RUNNER_TEMP/db" >> $GITHUB_ENV
        echo "CODEQL_RESULT_PATH=$RUNNER_TEMP/cpp.sarif" >> $GITHUB_ENV

    - name: Checkout scanner repository
      uses: actions/checkout@v3
      with:
        path: scanner

    - name: Checkout repository under test
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        submodules: recursive
        path: rut

    - name: arm-none-eabi-gcc GNU Arm Embedded Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1.6.0
      with:
        release: '10.3-2021.10'
      if: inputs.install_arm_cross_compiler


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then we should run the build manually (see below)
    - name: Autobuild
      if: ${{ inputs.build_script == '' }}
      working-directory: rut
      run: codeql database create $CODEQL_DATABASE_PATH --language=cpp

    # Build manually by executing the build_script
    - name: Manual build
      if: ${{ inputs.build_script != '' }}
      working-directory: rut
      run: >
        codeql database create $CODEQL_DATABASE_PATH --language=cpp
        --command "${{ github.workspace }}/scanner/.github/build-scripts/${{ inputs.build_script }}"

    - name: Perform CodeQL Analysis
      working-directory: rut
      run: codeql database analyze $CODEQL_DATABASE_PATH --format=sarif-latest --output=$CODEQL_RESULT_PATH --download codeql/cpp-queries:codeql-suites/cpp-security-and-quality.qls

    - name: Archive CodeQL results
      uses: actions/upload-artifact@v3
      with:
        name: codeql-results
        path: |
          ${{ env.CODEQL_RESULT_PATH }}

    - name: Test push-to-another-repo
      run: |
        if [ -n "${SSH_DEPLOY_KEY:=}" ]
        then
          echo "KEY is not empty"
        else
          echo "KEY is empty!!"
        fi

    - name: Push codeql results to purs3lab/OSSEmbeddedResults
      uses: cpina/github-action-push-to-another-repository@main
      env:
        SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
      with:
        source-directory: ${{ env.CODEQL_RESULT_PATH }}
        destination-github-username: 'purs3lab'
        destination-repository-name: 'OSSEmbeddedResults'
        user-email: shen497@purdue.edu
        target-branch: main
