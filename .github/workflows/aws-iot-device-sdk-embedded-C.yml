# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '20 7 * * 6'

jobs:
  analyze-demos:
    name: Analyze
    runs-on: ubuntu-20.04
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: aws/aws-iot-device-sdk-embedded-C
        submodules: recursive

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        queries: security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    - name: Configure CMake build
      run: |
        sudo apt-get install -y libmosquitto-dev
        curl https://cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.tar.gz -o cmake.tar.gz
        tar -xf cmake.tar.gz
        mkdir build && cd build
        ../cmake-3.2.0-Linux-x86_64/bin/cmake .. \
        -G "Unix Makefiles" \
        -DBUILD_DEMOS=1 \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS='-Wall -Wextra -Werror' \
        -DAWS_IOT_ENDPOINT="aws-iot-endpoint" \
        -DBROKER_ENDPOINT="broker-endpoint" \
        -DCLIENT_CERT_PATH="cert/path" \
        -DROOT_CA_CERT_PATH="cert/path" \
        -DCLIENT_PRIVATE_KEY_PATH="key/path" \
        -DCLIENT_IDENTIFIER="ci-identifier" \
        -DTHING_NAME="thing-name" \
        -DS3_PRESIGNED_GET_URL="get-url" \
        -DS3_PRESIGNED_PUT_URL="put-url" \
        -DCLAIM_CERT_PATH="cert/path" \
        -DCLAIM_PRIVATE_KEY_PATH="key/path" \
        -DPROVISIONING_TEMPLATE_NAME="template-name" \
        -DDEVICE_SERIAL_NUMBER="00000" \
        -DCSR_SUBJECT_NAME="CN=Fleet Provisioning Demo" \
        -DGREENGRASS_ADDRESS="greengrass-address"
    - name: Build Demos
      run: |
        make -C build/ help | grep demo | tr -d '. ' | xargs make -C build/
        make -C demos/jobs/jobs_demo_mosquitto

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
        upload: never

        #  analyze-demos-cpp:
        #    name: Analyze
        #    runs-on: ubuntu-20.04
        #    permissions:
        #      actions: read
        #      contents: read
        #      security-events: write
        #
        #    strategy:
        #      fail-fast: false
        #      matrix:
        #        language: [ 'cpp' ]
        #        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        #        # Use only 'java' to analyze code written in Java, Kotlin or both
        #        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        #        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
        #
        #    steps:
        #    - name: Checkout repository
        #      uses: actions/checkout@v3
        #      with:
        #        submodules: recursive
        #
        #    # Initializes the CodeQL tools for scanning.
        #    - name: Initialize CodeQL
        #      uses: github/codeql-action/init@v2
        #      with:
        #        languages: ${{ matrix.language }}
        #        queries: +security-extended,security-and-quality
        #
        #    - name: Rename source files
        #      run: |
        #        for demo in mqtt http shadow defender pkcs11 fleet_provisioning
        #        do
        #            for source in demos/$demo/*/*.c
        #            do
        #                mv -- "$source" "${source%.c}.cpp"
        #            done
        #        done
        #    - name: Configure CMake build
        #      run: |
        #        sudo apt-get install -y libmosquitto-dev
        #        curl https://cmake.org/files/v3.2/cmake-3.2.0-Linux-x86_64.tar.gz -o cmake.tar.gz
        #        tar -xf cmake.tar.gz
        #        mkdir build && cd build
        #        ../cmake-3.2.0-Linux-x86_64/bin/cmake .. \
        #        -G "Unix Makefiles" \
        #        -DBUILD_DEMOS=1 \
        #        -DCMAKE_BUILD_TYPE=Release \
        #        -DCMAKE_C_FLAGS='-Wall -Wextra' \
        #        -DAWS_IOT_ENDPOINT="aws-iot-endpoint" \
        #        -DBROKER_ENDPOINT="broker-endpoint" \
        #        -DCLIENT_CERT_PATH="cert/path" \
        #        -DROOT_CA_CERT_PATH="cert/path" \
        #        -DCLIENT_PRIVATE_KEY_PATH="key/path" \
        #        -DCLIENT_IDENTIFIER="ci-identifier" \
        #        -DTHING_NAME="thing-name" \
        #        -DS3_PRESIGNED_GET_URL="get-url" \
        #        -DS3_PRESIGNED_PUT_URL="put-url" \
        #        -DCLAIM_CERT_PATH="cert/path" \
        #        -DCLAIM_PRIVATE_KEY_PATH="key/path" \
        #        -DPROVISIONING_TEMPLATE_NAME="template-name" \
        #        -DDEVICE_SERIAL_NUMBER="00000" \
        #        -DCSR_SUBJECT_NAME="CN=Fleet Provisioning Demo" \
        #        -DGREENGRASS_ADDRESS="greengrass-address"
        #    - name: Build Demos
        #      run: |
        #        make -C build/ help | grep demo | tr -d '. ' | xargs make -C build/
        #
        #    - name: Perform CodeQL Analysis
        #      uses: github/codeql-action/analyze@v2
        #      with:
        #        category: "/language:${{matrix.language}}"
